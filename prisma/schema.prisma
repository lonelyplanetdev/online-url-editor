// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String  @id @default(cuid())
  username  String  @unique
  password  String
  superuser Boolean @default(false)

  sessions Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

// A template is a collection of fields that can be used to generate a URL
model URLBuilderTemplate {
  id           String  @id @default(cuid())
  name         String
  defaultUrl   String  @default("")
  canChangeUrl Boolean @default(true)

  fields URLBuilderTemplateField[]
}

enum URLBuilderTemplateFieldType {
  TEXT
  LIST
  SELECT
}

model URLBuilderTemplateField {
  templateId String

  key          String
  type         URLBuilderTemplateFieldType
  defaultValue String                      @default("")
  hidden       Boolean                     @default(false)
  optional     Boolean                     @default(false)
  encoded      Boolean                     @default(true)
  inPath       Boolean                     @default(false)

  template      URLBuilderTemplate              @relation(references: [id], fields: [templateId], onDelete: Cascade)
  selectOptions URLBuilderTemplateFieldOption[]

  @@id([templateId, key])
}

model URLBuilderTemplateFieldOption {
  key        String
  templateId String
  value      String
  label      String?

  field URLBuilderTemplateField @relation(references: [templateId, key], fields: [templateId, key], onDelete: Cascade)

  @@id([templateId, key, value])
}
